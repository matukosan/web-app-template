name: Database Setup and Migration

on:
  push:
    branches: [main]

jobs:
  database-setup:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'prod' }}

    env:
      DATABASE_HOST: ${{ vars.DATABASE_HOST || 'localhost' }}
      DATABASE_PORT: ${{ vars.DATABASE_PORT || '5432' }}
      DATABASE_USER: ${{ vars.DATABASE_USER || 'postgres' }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD || 'postgres' }}
      DATABASE_DATABASE: ${{ vars.DATABASE_DATABASE || 'app_template' }}
      PGPASSWORD: ${{ secrets.DATABASE_PASSWORD || 'postgres' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Check if database exists
        id: check_db
        run: |
          if psql -h ${{ env.DATABASE_HOST }} -p ${{ env.DATABASE_PORT }} -U ${{ env.DATABASE_USER }} -lqt | cut -d \| -f 1 | grep -qw "${{ env.DATABASE_DATABASE }}"; then
            echo "db_exists=true" >> $GITHUB_OUTPUT
          else
            echo "db_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create database if not exists
        if: steps.check_db.outputs.db_exists == 'false'
        run: |
          psql -h ${{ env.DATABASE_HOST }} -p ${{ env.DATABASE_PORT }} -U ${{ env.DATABASE_USER }} -d ${{ env.DATABASE_PASSWORD }} -c "CREATE DATABASE \"${{ env.DATABASE_DATABASE }}\";"
          echo "Database ${{ env.DATABASE_DATABASE }} created successfully"

      - name: Run Drizzle migrations
        run: npm run drizzle:migrate

      - name: Migration summary
        run: |
          echo "âœ… Database setup completed"
          echo "Database: ${{ env.DATABASE_DATABASE }}"
          echo "Migrations applied successfully"
