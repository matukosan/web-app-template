name: Build Docker and Deploy

on:
  workflow_run:
    workflows: ['Database Setup and Migration']
    types:
      - completed
    branches: [main]
  # Backup trigger for manual deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    environment: ${{ github.event.inputs.environment || 'prod' }}

    env:
      APP_NAME: ${{ vars.APP_NAME || 'web-app-template' }}
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      VM_HOST: ${{ vars.VM_HOST }}
      VM_USER: ${{ vars.VM_USER }}
      VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
      LETSENCRYPT_EMAIL: ${{ vars.LETSENCRYPT_EMAIL || 'hello@matuko.xyz' }}
      DOMAIN_ROOT: ${{ vars.DOMAIN_ROOT || 'matuko.xyz' }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}

      DATABASE_HOST: ${{ vars.DATABASE_HOST || 'localhost' }}
      DATABASE_PORT: ${{ vars.DATABASE_PORT || '5432' }}
      DATABASE_USER: ${{ vars.DATABASE_USER || 'postgres' }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD || 'postgres' }}
      DATABASE_DATABASE: ${{ vars.DATABASE_DATABASE || 'app_template' }}

      JWT_SECRET: ${{ secrets.JWT_SECRET || 'changeme' }}
      JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET || 'changeme' }}

      ENABLE_SIGNUP: ${{ vars.ENABLE_SIGNUP || 'false' }}
      SMTP_HOST: ${{ vars.SMTP_HOST || 'smtp.postmarkapp.com' }}
      SMTP_PORT: ${{ vars.SMTP_PORT || '587' }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASS: ${{ secrets.SMTP_PASS}}
      SMTP_SECURE: ${{ vars.SMTP_SECURE || 'false' }}
      SMTP_TLS_REJECT_UNAUTHORIZED: ${{ vars.SMTP_TLS_REJECT_UNAUTHORIZED || 'true' }}

      EMAIL_SENDER: ${{ vars.EMAIL_SENDER || 'no-reply@matuko.xyz' }}
      EMAIL_SENDER_NAME: ${{ vars.EMAIL_SENDER_NAME || 'Web App Template' }}
      SIGNIN_URL_BASE: ${{ vars.SIGNIN_URL_BASE || 'http://localhost:5173' }}

    steps:
      - name: Debug workflow trigger
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run status: ${{ github.event.workflow_run.status }}"
          echo "Workflow run name: ${{ github.event.workflow_run.name }}"
          echo "Branch: ${{ github.event.workflow_run.head_branch }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure Cloudflare DNS A record exists
        run: |
          SUBDOMAIN=${{ env.APP_NAME }}
          DOMAIN=${{ env.DOMAIN_ROOT }}
          CF_ZONE_ID=${{ env.CF_ZONE_ID }}
          CF_API_TOKEN=${{ env.CF_API_TOKEN }}
          VM_IP=${{ env.VM_HOST }}

          RECORD_NAME="${SUBDOMAIN}.${DOMAIN}"

          # Check if the DNS record already exists
          RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records?type=A&name=${RECORD_NAME}" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            | jq -r '.result[0].id')

          if [ "$RECORD_ID" = "null" ]; then
            echo "Creating new A record for ${RECORD_NAME} → ${VM_IP}"
            curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records" \
              -H "Authorization: Bearer ${CF_API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data '{
                "type": "A",
                "name": "'"${RECORD_NAME}"'",
                "content": "'"${VM_IP}"'",
                "ttl": 120,
                "proxied": false
              }'
          else
            echo "✅ DNS record for ${RECORD_NAME} already exists. Skipping..."
          fi
        shell: bash

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          npm audit fix --force || true

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create target folder
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            mkdir -p /opt/apps/${{ env.APP_NAME }}

      - name: Copy docker-compose.yml
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          source: docker-compose.yml
          target: /opt/apps/${{ env.APP_NAME }}

      - name: Deploy container with env vars
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            cd /opt/apps/${{ env.APP_NAME }}

            export VIRTUAL_HOST=${{ env.APP_NAME }}.${{ env.DOMAIN_ROOT }}
            export LETSENCRYPT_HOST=${{ env.APP_NAME }}.${{ env.DOMAIN_ROOT }}
            export LETSENCRYPT_EMAIL=${{ env.LETSENCRYPT_EMAIL }}
            export APP_NAME=${{ env.APP_NAME }}

            docker compose pull || true
            docker compose up -d
